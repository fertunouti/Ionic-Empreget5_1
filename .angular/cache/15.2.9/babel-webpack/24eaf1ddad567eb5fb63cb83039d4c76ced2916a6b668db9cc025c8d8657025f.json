{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:8080';\n    this.baseUrlByName = \"http://localhost:8080/prestadores/nome-contem/\";\n    this.baseUrlByRegion = \"http://localhost:8080/prestadores/regiao/\";\n    this.authToken = '';\n    this.email = '';\n    this.termoProcurado = '';\n    this.regionProcurado = '';\n  }\n  //Método para definir o tipo do User\n  setUserRole(user) {\n    this.tipoUserLogado = user;\n  }\n  //Método para obter tipo user logado\n  getUserRole() {\n    return this.tipoUserLogado;\n  }\n  // Método para definir o token JWT após a autenticação\n  setAuthToken(token) {\n    this.authToken = token;\n  }\n  // Método para obter o cabeçalho com o token JWT incluído\n  getAuthHeader() {\n    const token = this.authToken;\n    if (token) {\n      return new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    } else {\n      return new HttpHeaders();\n    }\n  }\n  // Método para obter o token JWT do cookie\n  getTokenCookie() {\n    const name = 'jwt_token=';\n    const decodedCookie = decodeURIComponent(document.cookie);\n    const cookieArray = decodedCookie.split(';');\n    for (let i = 0; i < cookieArray.length; i++) {\n      let cookie = cookieArray[i];\n      while (cookie.charAt(0) === ' ') {\n        cookie = cookie.substring(1);\n      }\n      if (cookie.indexOf(name) === 0) {\n        return cookie.substring(name.length, cookie.length);\n      }\n    }\n    return '';\n  }\n  //ENDPOINTS\n  // POST LOGIN\n  postData(data) {\n    const headers = this.getAuthHeader().set('Content-Type', 'application/json');\n    return this.http.post(`${this.baseUrl}/auth/login`, data, {\n      headers\n    });\n  }\n  // GET PERFIS PRESTADORES\n  getDataPerfisPrestadores() {\n    const headers = this.getAuthHeader();\n    return this.http.get(`${this.baseUrl}/prestadores/perfis`, {\n      headers\n    });\n  }\n  // GET USUARIOS CADASTRADOS\n  getDataUsuarios() {\n    const headers = this.getAuthHeader();\n    return this.http.get(`${this.baseUrl}/usuarios`, {\n      headers\n    });\n  }\n  addEmail(valorEmail) {\n    this.email = valorEmail;\n  }\n  readEmail() {\n    return this.email;\n  }\n  addTermo(valorTermo) {\n    if (valorTermo == \"\") {\n      this.termoProcurado = \"a\";\n    } else {\n      this.termoProcurado = valorTermo;\n    }\n  }\n  addRegion(valorTermo) {\n    this.regionProcurado = valorTermo;\n  }\n  readTermo() {\n    return this.termoProcurado;\n  }\n  read() {\n    return this.http.get(this.baseUrl);\n  }\n  readByName() {\n    const headers = this.getAuthHeader();\n    return this.http.get(this.baseUrlByName + this.termoProcurado, {\n      headers\n    });\n  }\n  readByRegion() {\n    const headers = this.getAuthHeader();\n    return this.http.get(this.baseUrlByRegion + this.regionProcurado, {\n      headers\n    });\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","ApiService","constructor","http","setUserRole","user","tipoUserLogado","getUserRole","setAuthToken","token","authToken","getAuthHeader","set","getTokenCookie","name","decodedCookie","decodeURIComponent","document","cookie","cookieArray","split","i","length","charAt","substring","indexOf","postData","data","headers","post","baseUrl","getDataPerfisPrestadores","get","getDataUsuarios","addEmail","valorEmail","email","readEmail","addTermo","valorTermo","termoProcurado","addRegion","regionProcurado","readTermo","read","readByName","baseUrlByName","readByRegion","baseUrlByRegion","factory","providedIn"],"sourceRoot":"","sources":["D:\\2023\\Codigos\\Ionic-EmpreGET5_1\\src\\app\\services\\apiService.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApiService {\r\n  private baseUrl = 'http://localhost:8080';\r\n  private baseUrlByName = \"http://localhost:8080/prestadores/nome-contem/\"\r\n  private baseUrlByRegion = \"http://localhost:8080/prestadores/regiao/\"\r\n\r\n  private authToken: string = '';\r\n  private tipoUserLogado!: string\r\n  private email: string = '';\r\n  private termoProcurado = '';\r\n  private regionProcurado = '';\r\n  \r\n\r\n  constructor(private http: HttpClient) { }\r\n  //Método para definir o tipo do User\r\n  setUserRole(user: string) {\r\n    this.tipoUserLogado = user\r\n  }\r\n\r\n  //Método para obter tipo user logado\r\n  getUserRole(){\r\n    return this.tipoUserLogado\r\n  }\r\n  // Método para definir o token JWT após a autenticação\r\n  setAuthToken(token: string): void {\r\n    this.authToken = token;\r\n  }\r\n\r\n  // Método para obter o cabeçalho com o token JWT incluído\r\n  private getAuthHeader(): HttpHeaders {\r\n    const token = this.authToken;\r\n    if (token) {\r\n      return new HttpHeaders().set('Authorization', `Bearer ${token}`);\r\n    } else {\r\n      return new HttpHeaders();\r\n    }\r\n  }\r\n\r\n  // Método para obter o token JWT do cookie\r\n  private getTokenCookie(): string {\r\n    const name = 'jwt_token=';\r\n    const decodedCookie = decodeURIComponent(document.cookie);\r\n    const cookieArray = decodedCookie.split(';');\r\n    for (let i = 0; i < cookieArray.length; i++) {\r\n      let cookie = cookieArray[i];\r\n      while (cookie.charAt(0) === ' ') {\r\n        cookie = cookie.substring(1);\r\n      }\r\n      if (cookie.indexOf(name) === 0) {\r\n        return cookie.substring(name.length, cookie.length);\r\n      }\r\n    }\r\n    return '';\r\n  }\r\n\r\n  //ENDPOINTS\r\n\r\n  // POST LOGIN\r\n  postData(data: any): Observable<any> {\r\n    const headers = this.getAuthHeader().set('Content-Type', 'application/json');\r\n    return this.http.post<any>(`${this.baseUrl}/auth/login`, data, { headers });\r\n  }\r\n\r\n  // GET PERFIS PRESTADORES\r\n  getDataPerfisPrestadores(): Observable<any> {\r\n    const headers = this.getAuthHeader();\r\n    return this.http.get<any>(`${this.baseUrl}/prestadores/perfis`, { headers });\r\n  }\r\n  // GET USUARIOS CADASTRADOS\r\n  getDataUsuarios(): Observable<any> {\r\n    const headers = this.getAuthHeader();\r\n    return this.http.get<any>(`${this.baseUrl}/usuarios`, { headers });\r\n  }\r\n\r\n  addEmail(valorEmail: string) {\r\n    this.email = valorEmail\r\n  }\r\n  readEmail() {\r\n    return this.email\r\n  }\r\n\r\n  addTermo(valorTermo: string) {\r\n    if (valorTermo == \"\"){\r\n      this.termoProcurado=\"a\"\r\n    }else{\r\n    this.termoProcurado = valorTermo\r\n    }\r\n  }\r\n  addRegion(valorTermo: string) {\r\n    this.regionProcurado = valorTermo\r\n  }\r\n\r\n  readTermo() {\r\n    return this.termoProcurado\r\n  }\r\n\r\n  read(): Observable<any> {\r\n    return this.http.get<any>(this.baseUrl)\r\n  }\r\n\r\n  readByName(): Observable<any> {\r\n      const headers = this.getAuthHeader();\r\n      return this.http.get<any>(this.baseUrlByName + this.termoProcurado, {headers})\r\n    \r\n  }\r\n  readByRegion(): Observable<any> {\r\n    const headers = this.getAuthHeader();\r\n    return this.http.get<any>(this.baseUrlByRegion + this.regionProcurado, {headers})\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}