{"ast":null,"code":"import { BrowserModule } from '@angular/platform-browser';\nimport { RouteReuseStrategy } from '@angular/router';\nimport { JWT_OPTIONS, JwtModule } from '@auth0/angular-jwt';\nimport { CookieService } from 'ngx-cookie-service';\nimport { TokenService } from '../app/services/token.service';\nimport { AuthGuard } from './auth.guard';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { AuthService } from '../app/services/auth.service';\nimport { IonicModule, IonicRouteStrategy } from '@ionic/angular';\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { HttpClientModule } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"@auth0/angular-jwt\";\nexport function jwtOptionsFactory(tokenService) {\n  return {\n    tokenGetter: () => {\n      return tokenService.getToken(); // Obter o token JWT do serviço TokenService\n    },\n\n    allowedDomains: ['http://localhost:8080'],\n    disallowedRoutes: ['http://localhost:8080/auth/login'] // Substitua pela(s) rota(s) que não devem receber o token\n  };\n}\n\nexport class AppModule {}\nAppModule.ɵfac = function AppModule_Factory(t) {\n  return new (t || AppModule)();\n};\nAppModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n  type: AppModule,\n  bootstrap: [AppComponent]\n});\nAppModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n  providers: [{\n    provide: RouteReuseStrategy,\n    useClass: IonicRouteStrategy\n  }, AuthGuard, AuthService, CookieService, TokenService, JwtHelperService],\n  imports: [HttpClientModule, BrowserModule, IonicModule.forRoot(), AppRoutingModule, JwtModule.forRoot({\n    jwtOptionsProvider: {\n      provide: JWT_OPTIONS,\n      useFactory: jwtOptionsFactory,\n      deps: [TokenService]\n    }\n  })]\n});\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(AppModule, {\n    declarations: [AppComponent],\n    imports: [HttpClientModule, BrowserModule, i1.IonicModule, AppRoutingModule, i2.JwtModule]\n  });\n})();","map":{"version":3,"mappings":"AAEA,SAASA,aAAa,QAAQ,2BAA2B;AACzD,SAASC,kBAAkB,QAAQ,iBAAiB;AACpD,SAASC,WAAW,EAAEC,SAAS,QAAQ,oBAAoB;AAC3D,SAASC,aAAa,QAAQ,oBAAoB;AAClD,SAASC,YAAY,QAAQ,+BAA+B;AAC5D,SAASC,SAAS,QAAQ,cAAc;AACxC,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,WAAW,QAAO,8BAA8B;AAEzD,SAASC,WAAW,EAAEC,kBAAkB,QAAQ,gBAAgB;AAEhE,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,gBAAgB,QAAQ,sBAAsB;AACvD,SAASC,gBAAgB,QAAQ,sBAAsB;;;;AAGvD,OAAM,SAAUC,iBAAiB,CAACC,YAA0B;EAC1D,OAAO;IACLC,WAAW,EAAE,MAAK;MAChB,OAAOD,YAAY,CAACE,QAAQ,EAAE,CAAC,CAAC;IAClC,CAAC;;IACDC,cAAc,EAAE,CAAC,uBAAuB,CAAC;IACzCC,gBAAgB,EAAE,CAAC,kCAAkC,CAAC,CAAE;GACzD;AACH;;AAqBA,OAAM,MAAOC,SAAS;;mBAATA,SAAS;AAAA;;QAATA,SAAS;EAAAC,YAFRV,YAAY;AAAA;;aADb,CAAC;IAAEW,OAAO,EAAErB,kBAAkB;IAAEsB,QAAQ,EAAEb;EAAkB,CAAE,EAAEJ,SAAS,EAAEE,WAAW,EAAEJ,aAAa,EAAEC,YAAY,EAAEE,gBAAgB,CAAC;EAAAiB,UAb/IX,gBAAgB,EAChBb,aAAa,EACbS,WAAW,CAACgB,OAAO,EAAE,EACrBb,gBAAgB,EAChBT,SAAS,CAACsB,OAAO,CAAC;IAChBC,kBAAkB,EAAE;MAClBJ,OAAO,EAAEpB,WAAW;MACpByB,UAAU,EAAEb,iBAAiB;MAC7Bc,IAAI,EAAE,CAACvB,YAAY;;GAEtB,CAAC;AAAA;;2EAMOe,SAAS;IAAAS,eAlBLlB,YAAY;IAAAa,UAEzBX,gBAAgB,EAChBb,aAAa,kBAEbY,gBAAgB;EAAA;AAAA","names":["BrowserModule","RouteReuseStrategy","JWT_OPTIONS","JwtModule","CookieService","TokenService","AuthGuard","JwtHelperService","AuthService","IonicModule","IonicRouteStrategy","AppComponent","AppRoutingModule","HttpClientModule","jwtOptionsFactory","tokenService","tokenGetter","getToken","allowedDomains","disallowedRoutes","AppModule","bootstrap","provide","useClass","imports","forRoot","jwtOptionsProvider","useFactory","deps","declarations"],"sourceRoot":"","sources":["D:\\2023\\Codigos\\Ionic-EmpreGET5_1\\src\\app\\app.module.ts"],"sourcesContent":["\r\nimport { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { RouteReuseStrategy } from '@angular/router';\r\nimport { JWT_OPTIONS, JwtModule } from '@auth0/angular-jwt';\r\nimport { CookieService } from 'ngx-cookie-service';\r\nimport { TokenService } from '../app/services/token.service';\r\nimport { AuthGuard } from './auth.guard';\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\nimport { AuthService} from '../app/services/auth.service';\r\n\r\nimport { IonicModule, IonicRouteStrategy } from '@ionic/angular';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\n\r\nexport function jwtOptionsFactory(tokenService: TokenService) {\r\n  return {\r\n    tokenGetter: () => {\r\n      return tokenService.getToken(); // Obter o token JWT do serviço TokenService\r\n    },\r\n    allowedDomains: ['http://localhost:8080'], // Substitua pelo(s) domínio(s) permitidos que podem receber o token\r\n    disallowedRoutes: ['http://localhost:8080/auth/login'], // Substitua pela(s) rota(s) que não devem receber o token\r\n  };\r\n}\r\n\r\n@NgModule({\r\n  declarations: [AppComponent],\r\n  imports: [\r\n    HttpClientModule,\r\n    BrowserModule,\r\n    IonicModule.forRoot(),\r\n    AppRoutingModule,\r\n    JwtModule.forRoot({\r\n      jwtOptionsProvider: {\r\n        provide: JWT_OPTIONS,\r\n        useFactory: jwtOptionsFactory,\r\n        deps: [TokenService]\r\n      }\r\n    }),\r\n  ],\r\n   \r\n  providers: [{ provide: RouteReuseStrategy, useClass: IonicRouteStrategy }, AuthGuard, AuthService, CookieService, TokenService, JwtHelperService],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}